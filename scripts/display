#!/usr/bin/env python
'''Display results of tests

Usage: display [opts] (Valid|Invalid) <bld>

  -t <tool>  / --tool <tool>  Only display results for specific tool
  -g <pat>   / --grep <pat>   Only display results that contain pattern
'''

import sys
import re
import getopt
import glob
import os

from point_six import prnt

_subject_re = re.compile('^subject= ' +
                         '(/C=(?P<C>[^/]+))?' +
                         '(/ST=(?P<ST>[^/]+))?' +
                         '(/L=(?P<L>[^/]+))?' +
                         '(/O=(?P<O>[^/]+))?' +
                         '(/CN=(?P<CN>[^/]+))?' +
                         '(/SN=(?P<SN>[^/]+))?' +
                         '(/dnQualifier=(?P<dnQualifier>[^/]+))?' +
                         '(/GN=(?P<GN>[^/]+))?' +
                         '\s*$')

def display(expect, bld, tool, grep=None):
    needle = re.compile("TLS-VALIDATION: %s" %
                        ("Failed" if expect == "Valid" else "Success"))
    prefix = "ok" if expect == "Valid" else "xf"
    subdir = tool.lower() if tool else '*'
    if grep:
        haystack = 'results/%s/%s/%s-*%s*' % (subdir, bld, prefix, grep)
    else:
        haystack = 'results/%s/%s/%s-*' % (subdir, bld, prefix)
    submsg = "%s " % tool if tool else ""
    fname_re = re.compile("results/(?P<subdir>\S+)/"
                          "(?P<bld>\S+)/(?P<prefix>..)-(?P<case>.*).out")
    subdirs = set()
    failures = {}  # casename => [subdir, subdir, ...]
    for filename in glob.glob(haystack):
        m = fname_re.match(filename)
        if not m:
            raise Exception("Unexpected filename structure %s" % filename)
        with open(filename, "r") as infile:
            contents = infile.read()
            if needle.search(contents):
                subdir = m.group('subdir')
                subdirs.add(subdir)
                assert bld == m.group('bld')
                assert prefix == m.group('prefix')
                case = m.group('case')
                if case not in failures:
                    failures[case] = []
                failures[case].append(subdir)
    if len(failures) == 0:
        return

    # Extract info about the test case from the subject/givenName
    case_text = {}
    for case in sorted(failures.keys()):
        certname = "certs/%s-%s.der" % (prefix, case)
        if not os.path.isfile(certname):
            certname = "certs2/%s-%s.leaf.der" % (prefix, case)
        subject = os.popen('openssl x509 -in %s -inform der -subject -noout' % certname).read()
        m = _subject_re.match(subject)
        if m and m.group('GN'):
            case_text[case] = m.group('GN').rstrip()
        else:
            case_text[case] = subject.rstrip()

    if expect == "Valid":
        prnt("*** Valid certificates that failed %svalidation:" % submsg)
    else:
        prnt("*** Invalid certificates that passed %svalidation:" % submsg)
    subdirs = list(sorted(subdirs))
    for case in sorted(failures.keys()):
        flist = [" %-*s" % (len(s), s if s in failures[case] else '') for s in subdirs]
        prnt("  %-30s%s  '%s'" % ('%s:' % case, "".join(flist), case_text[case]))


if __name__ == "__main__":
    tool = None
    grep = None
    try:
        opts, args = getopt.getopt(sys.argv[1:], "ht:g:v", ("help", "tool=", "grep=", "verbose"))
    except getopt.GetoptError:
        prnt(__doc__, file=sys.stderr)
        sys.exit(1)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            prnt(__doc__, file=sys.stderr)
            sys.exit(1)
        elif opt in ("-t", "--tool"):
            tool = arg
        elif opt in ("-g", "--grep"):
            grep = arg
        else:
            prnt("Unknown option %s" % opt, file=sys.stderr)
            prnt(__doc__, file=sys.stderr)
            sys.exit(1)

    if len(args) != 2:
        prnt(__doc__, file=sys.stderr)
        sys.exit(1)

    display(args[0], args[1], tool, grep)
