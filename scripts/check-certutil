#!/bin/sh
# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Wrapper for certtool, to ensure a validation result is recorded
CERTUTIL=$1
CERT=$2
CERT2=$3
# Import the cert(s) into the NSS database, which can fail for invalid certs
OUTPUT=`$CERTUTIL -A -d nss-db -n "Cert from $CERT" -t ,, -i $CERT`
RESULT=$?
if [ $RESULT != 0 ]; then
    echo "TLS-VALIDATION: Failed"
    exit
fi
if [ "$CERT2" != "" ]; then
    OUTPUT=`$CERTUTIL -A -d nss-db -n "Cert from $CERT2" -t ,, -i $CERT2`
    RESULT=$?
    if [ $RESULT != 0 ]; then
        echo "TLS-VALIDATION: Failed"
        exit
    fi
fi

# Perform explicit validation.
OUTPUT=`$CERTUTIL -V -d nss-db -n "Cert from $CERT" -u V,,`
RESULT=$?
if [ "$CERT2" != "" ]; then
    OUTPUT2=`$CERTUTIL -V -d nss-db -n "Cert from $CERT2" -u V,,`
    RESULT2=$?
fi

# Remove the cert(s)
certutil -D -d nss-db -n "Cert from $CERT"
if [ "$CERT2" != "" ]; then
    certutil -D -d nss-db -n "Cert from $CERT2"
fi

# Now output results.
echo "$OUTPUT"
if [ $RESULT != 0 ]; then
    echo "TLS-VALIDATION: Failed"
else
    if [ "$CERT2" != "" ]; then
        echo "$OUTPUT2"
        if [ $RESULT != 0 ]; then
            echo "TLS-VALIDATION: Failed"
        else
            echo "TLS-VALIDATION: Success"
        fi
    else
        echo "TLS-VALIDATION: Success"
    fi
fi
